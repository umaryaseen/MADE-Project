pipeline BattryTemperaturePipeline {

    DataFileExtractor
        ->BatteryTemperatureZipArchiveInterpreter
        ->BatteryTemperatureFilePicker
        ->BatteryTemperatureTextFileInterpreter
        ->BatteryTemperatureCSVInterpreter
        ->BatteryTemperatureDataSelector
        ->BatteryTemperatureColumnDeleter
        ->BatteryTemperatureNameHeaderWriter
        ->BatteryTemperatureTableInterpreter
        ->TemperatureTransformer
        ->BatteryTemperatureTransformer
        ->BatteryTemperatureCellsLoader;


    block DataFileExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block BatteryTemperatureZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block BatteryTemperatureFilePicker oftype FilePicker {
        path: "./data.csv";
    }

    block BatteryTemperatureTextFileInterpreter oftype TextFileInterpreter { }

    block BatteryTemperatureCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    block BatteryTemperatureDataSelector oftype CellRangeSelector {
        select: range A1:J*;
    }

    block BatteryTemperatureColumnDeleter oftype ColumnDeleter {
        delete: [
             column F, column G, column H, column I
        ];
    }

    block BatteryTemperatureNameHeaderWriter oftype CellWriter {
        at: range A1:F1;
        write: [
            "id",
            "producer",
            "model",
            "month",
            "temperature",
            "battery_temperature"
        ];
    }

    constraint IdRegex oftype RangeConstraint {
        lowerBound: 0;
    }

    valuetype id oftype integer {
        constraints: [
            IdRegex,
        ];
    }

    block BatteryTemperatureTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype id,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    transform CelsiusToFahrenheit {
        from celsius oftype decimal;
        to fahrenheit oftype decimal;

        fahrenheit: (celsius * 9/5) + 32;
    }



    block TemperatureTransformer oftype TableTransformer {
        inputColumns: [
            'temperature'
        ];
        outputColumn: 'temperature';
        uses: CelsiusToFahrenheit;
    }

    block BatteryTemperatureTransformer oftype TableTransformer {
        inputColumns: [
            'battery_temperature'
        ];
        outputColumn: 'battery_temperature';
        uses: CelsiusToFahrenheit;
    }

    block BatteryTemperatureCellsLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}